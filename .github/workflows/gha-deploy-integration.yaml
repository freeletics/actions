name: "Deploy integration"

on:
  workflow_call:
    inputs:
      ARTIFACTS_NAME:
        type: string
        required: false
      ARTIFACTS_COMPRESSED:
        type: boolean
        required: false
        default: false
      DOCKERFILE:
        type: string
        required: false
        default: "Dockerfile"
      AWS_ECR_ENV_NAME:
        required: false
        type: string
        default: "prod"
      AWS_REGION:
        required: true
        type: string
      AWS_ACCOUNT_ID:
        required: true
        type: string
      KANIKO_CACHE:
        required: false
        type: boolean
        default: true

permissions:
  id-token: write
  contents: read
  actions: write

jobs:
  build:
    name: Build Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Skip Duplicate Actions
        uses: fkirc/skip-duplicate-actions@v5.2.0
        with:
          concurrent_skipping: "same_content"
          cancel_others: "true"

      - name: Check out code
        uses: actions/checkout@v3

      - name: Download artifacts
        if: ${{ inputs.ARTIFACTS_NAME != '' }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.ARTIFACTS_NAME }}
          path: ${{ github.workspace }}/${{ inputs.ARTIFACTS_NAME }}

      - name: Uncompress Artifacts
        if: ${{ inputs.ARTIFACTS_COMPRESSED == true }}
        run: tar -xzf ${{ github.workspace }}/${{ inputs.ARTIFACTS_NAME }}/${{ inputs.ARTIFACTS_NAME }}.tar.gz -C ${{ github.workspace }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2.1.0
        with:
          role-to-assume: arn:aws:iam::${{ inputs.AWS_ACCOUNT_ID }}:role/github-actions/fl-${{ inputs.AWS_ECR_ENV_NAME }}-${{ github.event.repository.name }}
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.6.0

      - name: Get Today's Unix timestamp
        id: timestamp
        run: echo "date=$(date +'%s')" >> $GITHUB_OUTPUT

        # for tag we use gha-prod
      - uses: docker/metadata-action@v4.1.1
        name: Generate tags
        id: metadata
        with:
          images: ${{ inputs.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com/${{ github.event.repository.name }}
          tags: |
            type=sha,enable=true,priority=600,prefix=gha-,suffix=
            type=raw,enable=true,priority=600,prefix=gha-deploy-int-,value=${{ steps.timestamp.outputs.date }}

      - uses: int128/kaniko-action@v1.14.0
        name: Build with Kaniko
        with:
          push: true
          file: "${{ inputs.DOCKERFILE }}"
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          cache: ${{ inputs.KANIKO_CACHE }}
          cache-repository: ${{ inputs.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com/kaniko-cache


      - name: Delete Old Artifacts
        if: ${{ inputs.ARTIFACTS_NAME != '' }}
        continue-on-error: true
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const artifacts = await github.rest.actions.listArtifactsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
              })
              if (artifacts) {
                  artifacts.data.artifacts.forEach(({ artifact_id }) => {
                      const deleteArtifact = github.rest.actions.deleteArtifact({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        artifact_id: artifact_id,
                      })
                    })
                }
            } catch(e) {
              console.log("Delete Old Artifacts failed with error: ", e)
            }