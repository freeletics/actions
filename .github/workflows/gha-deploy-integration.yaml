name: "Deploy integration"

on:
  workflow_call:
    inputs:
      ARTIFACTS_NAME:
        type: string
        required: false
      ARTIFACTS_COMPRESSED:
        type: boolean
        required: false
        default: false
      DOCKERFILE:
        type: string
        required: false
        default: "Dockerfile"
      AWS_ECR_ENV_NAME:
        required: false
        type: string
        default: "prod"
      AWS_REGION:
        required: true
        type: string
      AWS_ACCOUNT_ID:
        required: true
        type: string
      KANIKO_CACHE:
        required: false
        type: boolean
        default: true

permissions:
  id-token: write
  contents: read
  actions: write
  deployments: write

jobs:
  build:
    name: Build Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Show GitHub context   
        env: 
          GITHUB_CONTEXT: ${{ toJson(github) }}   
        run: echo "$GITHUB_CONTEXT"
        shell: bash
      - name: Skip Duplicate Actions
        uses: fkirc/skip-duplicate-actions@v5.3.1
        with:
          concurrent_skipping: "same_content"
          cancel_others: "true"

      - name: Check out code
        uses: actions/checkout@v4

      - name: Download artifacts
        if: ${{ inputs.ARTIFACTS_NAME != '' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.ARTIFACTS_NAME }}
          path: ${{ github.workspace }}/${{ inputs.ARTIFACTS_NAME }}

      - name: Uncompress Artifacts
        if: ${{ inputs.ARTIFACTS_COMPRESSED == true }}
        run: tar -xzf ${{ github.workspace }}/${{ inputs.ARTIFACTS_NAME }}/${{ inputs.ARTIFACTS_NAME }}.tar.gz -C ${{ github.workspace }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.2.0
        with:
          role-to-assume: arn:aws:iam::${{ inputs.AWS_ACCOUNT_ID }}:role/github-actions/fl-${{ inputs.AWS_ECR_ENV_NAME }}-${{ github.event.repository.name }}
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1

      - name: Get Today's Unix timestamp
        id: timestamp
        run: echo "date=$(date +'%s')" >> $GITHUB_OUTPUT

        # for tag we use gha-prod
      - uses: docker/metadata-action@v5.8.0
        name: Generate tags
        id: metadata
        with:
          images: ${{ inputs.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com/${{ github.event.repository.name }}
          tags: |
            type=sha,enable=true,priority=600,prefix=gha-,suffix=
            type=raw,enable=true,priority=600,prefix=gha-deploy-int-,value=${{ steps.timestamp.outputs.date }}
      - uses: int128/kaniko-action@v1.49.0
        name: Build with Kaniko
        with:
          push: true
          file: "${{ inputs.DOCKERFILE }}"
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          cache: ${{ inputs.KANIKO_CACHE }}
          cache-repository: ${{ inputs.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com/kaniko-cache
      # we will not activate GH deployment creation for a custom branch deployment for now
      - uses: chrnorm/deployment-action@v2
        name: Create GitHub deployment
        id: deployment
        if: github.ref == 'refs/heads/master'
        with:
          token: '${{ github.token }}'
          environment: integration
          initial-status: in_progress
          payload: "{\"docker_image_tag\":\"gha-deploy-int-${{ steps.timestamp.outputs.date }}\",\"deployed_by\":\"${{github.actor}}\"}"
          
      - name: Update deployment status (in_progress)
        uses: chrnorm/deployment-status@v2
        if: github.ref == 'refs/heads/master'
        with:
          token: '${{ github.token }}'
          environment-url: http://my-app-url.com
          state: 'in_progress'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

