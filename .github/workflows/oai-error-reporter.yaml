name: OAI Error Reporter

on:
  workflow_call:
    inputs:
      job_name:
        description: 'The name of the job to inspect for failures.'
        required: true
        type: string
      model:
        description: 'The AI model to use for analysis.'
        required: true
        type: string
      endpoint:
        description: 'The API endpoint for OpenWebUI.'
        required: true
        type: string
      issue_label:
        description: 'Labels to add to the created GitHub issue.'
        required: false
        default: 'ci-failure'
        type: string
    secrets:
      OPENWEBUI_API_KEY:
        description: 'The API key for OpenWebUI.'
        required: true

permissions:
  issues: write
  actions: read
  contents: read

jobs:
  report_errors:
    runs-on: ubuntu-latest

    steps:
      - name: Fetch Failed Steps and Logs
        id: fetch_failures
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const jobName = '${{ inputs.job_name }}';
            const runId = context.runId;
            
            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId,
            });

            const targetJob = jobs.jobs.find(job => job.name === jobName);
            if (!targetJob) {
              throw new Error(`Job "${jobName}" not found.`);
            }

            const logs = await github.rest.actions.downloadJobLogsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              job_id: targetJob.id,
              accept: 'application/vnd.github.v3+json',
            });

            const failedSteps = targetJob.steps.filter(step => step.conclusion === 'failure');
            if (failedSteps.length === 0) {
              core.info(`No failed steps found in job "${jobName}".`);
              return { failures: '', logs: '' };
            }

            let summary = '';
            failedSteps.forEach(step => {
              summary += `- **${step.name}**: ${step.conclusion}\n`;
            });

            core.setOutput('failures', summary);
            core.setOutput('logs', Buffer.from(logs.data).toString('base64'));

      - name: Send Errors to OpenWebUI and Get Analysis
        id: bot_response
        if: steps.fetch_failures.outputs.failures != ''
        run: |
          echo "Sending errors to OpenWebUI..."

          if ! command -v jq &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y jq
          fi

          # Decode logs first
          DECODED_LOGS=$(echo "${{ steps.fetch_failures.outputs.logs }}" | base64 -d)
          
          # Create message content first
          MESSAGE_CONTENT=$(cat << EOF
          Analyze these CI failures:

          Failed Steps:
          ${{ steps.fetch_failures.outputs.failures }}

          Full Logs:
          $DECODED_LOGS

          Please identify the root cause and provide specific recommendations.
          EOF
          )

          # Create JSON payload using proper jq string interpolation
          PAYLOAD=$(jq -n \
            --arg model "${{ inputs.model }}" \
            --arg content "$MESSAGE_CONTENT" \
            '{
              model: $model,
              messages: [{
                role: "user",
                content: $content
              }]
            }')

          # Send request and capture response with proper error handling
          RESPONSE=$(curl -s -w "\n%{http_code}" "${{ inputs.endpoint }}" \
            -H "Authorization: Bearer ${{ secrets.OPENWEBUI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD")

          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
          RESPONSE_BODY=$(echo "$RESPONSE" | sed '$d')

          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "Error: API request failed with status $HTTP_STATUS"
            echo "Response: $RESPONSE_BODY"
            exit 1
          fi

          # Validate and extract the analysis
          if echo "$RESPONSE_BODY" | jq empty > /dev/null 2>&1; then
            ANALYSIS=$(echo "$RESPONSE_BODY" | jq -r '.choices[0].message.content')
            if [ -n "$ANALYSIS" ]; then
              echo "analysis=$(echo "$ANALYSIS" | base64 -w 0)" >> $GITHUB_OUTPUT
            else
              echo "Error: Empty analysis in response"
              exit 1
            fi
          else
            echo "Error: Invalid JSON response"
            echo "Response: $RESPONSE_BODY"
            exit 1
          fi

      - name: Create GitHub Issue with Analysis
        if: steps.bot_response.outputs.analysis != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const analysis = Buffer.from('${{ steps.bot_response.outputs.analysis }}', 'base64').toString();
            const failures = `${{ steps.fetch_failures.outputs.failures }}`;

            const issueTitle = `⚠️ CI Pipeline Failures Detected - Run #${context.runId}`;
            const issueBody = `
            **CI Pipeline Failures Summary:**
            \`\`\`
            ${failures}
            \`\`\`

            **Bot Analysis and Recommendations:**
            \`\`\`
            ${analysis}
            \`\`\`

            **Workflow Run Details:**
            - Repository: \`${context.repo.owner}/${context.repo.repo}\`
            - Workflow: \`${context.workflow}\`
            - Run ID: \`${context.runId}\`
            - Run URL: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
            `;

            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['${{ inputs.issue_label }}']
            });

            if (!existingIssues.data.some(issue => issue.title === issueTitle)) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['${{ inputs.issue_label }}']
              });
              console.log("GitHub issue created successfully.");
            } else {
              console.log("An issue for CI failures already exists.");
            }
