name: "Docker Base-Image Updater"

on:
  workflow_call:
    inputs:
      DOCKERFILE:
        type: string
        required: false
        default: "Dockerfile"
      AWS_ACCOUNT_ID:
        required: true
        type: string
permissions:
  id-token: write
  contents: read
  actions: write

jobs:
  build:
    name: Build Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.JENKINS_PAT_FLUXCD }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: arn:aws:iam::${{ inputs.AWS_ACCOUNT_ID }}:role/github-actions/fl-prod-${{ github.event.repository.name }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1

      - name: Find latest tag on ECR
        id: get-tag
        shell: bash
        run: |
          image_tags=$(aws ecr describe-images --repository-name "rails-baseimage" --region "eu-west-1" --output json | jq -r '.imageDetails[] | select(.imageTags != null) | .imageTags[]' | awk '/^[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{2}-[0-9]{2}-[0-9]{2}$/')
          echo "$image_tags"
          latest_tag=$(echo "${image_tags}" | sort -r | head -n 1)
          echo "$latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Check updated needed for dockerfile
        id: check_update
        run: |
          current_tag=$(grep -oP 'FROM .+:\K.+' "${{ inputs.DOCKERFILE }}")
          if [ "${current_tag}" = "${{ steps.get-tag.outputs.latest_tag }}" ]; then
            echo "The Dockerfile already uses the latest image tag. No update needed."
          else
            echo "We need to update the image: current tag is $current_tag"
            echo "update_needed=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Update the Docker image
        if: steps.check_update.outputs.update_needed == 'true'
        run: |
          sed -i "s|^\(FROM .*\):.*|\1:${{ steps.get-tag.outputs.latest_tag }}|" "${{ inputs.DOCKERFILE }}"

      - name: Commit changes and create PR 
        if: steps.check_update.outputs.update_needed == 'true'
        env:
          GH_TOKEN: ${{ secrets.DEPENDABOT_PAT }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git checkout -b update-dockerfile-${{ github.run_id }}
          git add Dockerfile
          git commit -m "Update Dockerfile with new image tag ${{ steps.get-tag.outputs.latest_tag }}"
          git push origin update-dockerfile-${{ github.run_id }}
          gh pr create --title "Update Dockerfile to ${{ steps.get-tag.outputs.latest_tag }}" \
            --body "This PR updates the Dockerfile to use the latest image tag." \
            --reviewer khaledm1990,alberto98fx,freeletics/Operations

